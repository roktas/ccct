{
  "style": {
    "color": "#000000",
    "background-color": "#ffffff",
    "font-family": [
      "Consolas",
      "Courier New",
      "monospace"
    ],
    "font-weight": "normal",
    "font-size": "14px",
    "line-height": "19px",
    "white-space": "pre"
  },
  "codes": [
    {
      "color": "#808080",
      "content": "#include"
    },
    {
      "color": "#a31515",
      "content": "\"cache.h\""
    },
    {
      "color": "#808080",
      "content": "#include"
    },
    {
      "color": "#a31515",
      "content": "\"config.h\""
    },
    {
      "color": "#808080",
      "content": "#include"
    },
    {
      "color": "#a31515",
      "content": "\"grep.h\""
    },
    {
      "color": "#808080",
      "content": "#include"
    },
    {
      "color": "#a31515",
      "content": "\"object-store.h\""
    },
    {
      "color": "#808080",
      "content": "#include"
    },
    {
      "color": "#a31515",
      "content": "\"userdiff.h\""
    },
    {
      "color": "#808080",
      "content": "#include"
    },
    {
      "color": "#a31515",
      "content": "\"xdiff-interface.h\""
    },
    {
      "color": "#808080",
      "content": "#include"
    },
    {
      "color": "#a31515",
      "content": "\"diff.h\""
    },
    {
      "color": "#808080",
      "content": "#include"
    },
    {
      "color": "#a31515",
      "content": "\"diffcore.h\""
    },
    {
      "color": "#808080",
      "content": "#include"
    },
    {
      "color": "#a31515",
      "content": "\"commit.h\""
    },
    {
      "color": "#808080",
      "content": "#include"
    },
    {
      "color": "#a31515",
      "content": "\"quote.h\""
    },
    {
      "color": "#808080",
      "content": "#include"
    },
    {
      "color": "#a31515",
      "content": "\"help.h\""
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "grep_source_load("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "grep_source_is_binary("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "index_state*"
    },
    {
      "color": "#808080",
      "content": "istate"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "std_output("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "buf"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#808080",
      "content": "size"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "fwrite(buf,size,1,stdout);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_optgrep_defaults={"
    },
    {
      "color": "#000000",
      "content": ".relative=1,"
    },
    {
      "color": "#000000",
      "content": ".pathname=1,"
    },
    {
      "color": "#000000",
      "content": ".max_depth=-1,"
    },
    {
      "color": "#000000",
      "content": ".pattern_type_option=GREP_PATTERN_TYPE_UNSPECIFIED,"
    },
    {
      "color": "#000000",
      "content": ".colors={"
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_CONTEXT]="
    },
    {
      "color": "#a31515",
      "content": "\"\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_FILENAME]=GIT_COLOR_MAGENTA,"
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_FUNCTION]="
    },
    {
      "color": "#a31515",
      "content": "\"\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_LINENO]=GIT_COLOR_GREEN,"
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_COLUMNNO]=GIT_COLOR_GREEN,"
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_MATCH_CONTEXT]=GIT_COLOR_BOLD_RED,"
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_MATCH_SELECTED]=GIT_COLOR_BOLD_RED,"
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_SELECTED]="
    },
    {
      "color": "#a31515",
      "content": "\"\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_SEP]=GIT_COLOR_CYAN,"
    },
    {
      "color": "#000000",
      "content": "},"
    },
    {
      "color": "#000000",
      "content": ".only_matching=0,"
    },
    {
      "color": "#000000",
      "content": ".color=-1,"
    },
    {
      "color": "#000000",
      "content": ".output=std_output,"
    },
    {
      "color": "#000000",
      "content": "};"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*color_grep_slots"
    },
    {
      "color": "#0000ff",
      "content": "[]"
    },
    {
      "color": "#000000",
      "content": "={"
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_CONTEXT]="
    },
    {
      "color": "#a31515",
      "content": "\"context\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_FILENAME]="
    },
    {
      "color": "#a31515",
      "content": "\"filename\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_FUNCTION]="
    },
    {
      "color": "#a31515",
      "content": "\"function\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_LINENO]="
    },
    {
      "color": "#a31515",
      "content": "\"lineNumber\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_COLUMNNO]="
    },
    {
      "color": "#a31515",
      "content": "\"column\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_MATCH_CONTEXT]="
    },
    {
      "color": "#a31515",
      "content": "\"matchContext\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_MATCH_SELECTED]="
    },
    {
      "color": "#a31515",
      "content": "\"matchSelected\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_SELECTED]="
    },
    {
      "color": "#a31515",
      "content": "\"selected\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "[GREP_COLOR_SEP]="
    },
    {
      "color": "#a31515",
      "content": "\"separator\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "};"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "parse_pattern_type_arg("
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "arg"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!strcmp(arg,"
    },
    {
      "color": "#a31515",
      "content": "\"default\""
    },
    {
      "color": "#000000",
      "content": "))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_TYPE_UNSPECIFIED;"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!strcmp(arg,"
    },
    {
      "color": "#a31515",
      "content": "\"basic\""
    },
    {
      "color": "#000000",
      "content": "))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_TYPE_BRE;"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!strcmp(arg,"
    },
    {
      "color": "#a31515",
      "content": "\"extended\""
    },
    {
      "color": "#000000",
      "content": "))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_TYPE_ERE;"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!strcmp(arg,"
    },
    {
      "color": "#a31515",
      "content": "\"fixed\""
    },
    {
      "color": "#000000",
      "content": "))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_TYPE_FIXED;"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!strcmp(arg,"
    },
    {
      "color": "#a31515",
      "content": "\"perl\""
    },
    {
      "color": "#000000",
      "content": "))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_TYPE_PCRE;"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"bad%sargument:%s\""
    },
    {
      "color": "#000000",
      "content": ",opt,arg);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "define_list_config_array_extra(color_grep_slots,{"
    },
    {
      "color": "#a31515",
      "content": "\"match\""
    },
    {
      "color": "#000000",
      "content": "});"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Readtheconfigurationfileonceandstoreitin"
    },
    {
      "color": "#008000",
      "content": "*thegrep_defaultstemplate."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "grep_config("
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "var"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "value"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "cb"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*opt=&grep_defaults;"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*slot;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(userdiff_config(var,value)<0)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "-1;"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Theinstanceofgrep_optthatwesetuphereiscopiedby"
    },
    {
      "color": "#008000",
      "content": "*grep_init()tobeusedbyeachindividualinvocation."
    },
    {
      "color": "#008000",
      "content": "*Whenpopulatinganewfieldofthisstructurehere,be"
    },
    {
      "color": "#008000",
      "content": "*suretothinkaboutownership--e.g.,youmightneedto"
    },
    {
      "color": "#008000",
      "content": "*overridetheshallowcopyingrep_init()withadeepcopy."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!strcmp(var,"
    },
    {
      "color": "#a31515",
      "content": "\"grep.extendedregexp\""
    },
    {
      "color": "#000000",
      "content": ")){"
    },
    {
      "color": "#000000",
      "content": "opt->extended_regexp_option=git_config_bool(var,value);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!strcmp(var,"
    },
    {
      "color": "#a31515",
      "content": "\"grep.patterntype\""
    },
    {
      "color": "#000000",
      "content": ")){"
    },
    {
      "color": "#000000",
      "content": "opt->pattern_type_option=parse_pattern_type_arg(var,value);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!strcmp(var,"
    },
    {
      "color": "#a31515",
      "content": "\"grep.linenumber\""
    },
    {
      "color": "#000000",
      "content": ")){"
    },
    {
      "color": "#000000",
      "content": "opt->linenum=git_config_bool(var,value);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!strcmp(var,"
    },
    {
      "color": "#a31515",
      "content": "\"grep.column\""
    },
    {
      "color": "#000000",
      "content": ")){"
    },
    {
      "color": "#000000",
      "content": "opt->columnnum=git_config_bool(var,value);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!strcmp(var,"
    },
    {
      "color": "#a31515",
      "content": "\"grep.fullname\""
    },
    {
      "color": "#000000",
      "content": ")){"
    },
    {
      "color": "#000000",
      "content": "opt->relative=!git_config_bool(var,value);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!strcmp(var,"
    },
    {
      "color": "#a31515",
      "content": "\"color.grep\""
    },
    {
      "color": "#000000",
      "content": "))"
    },
    {
      "color": "#000000",
      "content": "opt->color=git_config_colorbool(var,value);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!strcmp(var,"
    },
    {
      "color": "#a31515",
      "content": "\"color.grep.match\""
    },
    {
      "color": "#000000",
      "content": ")){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(grep_config("
    },
    {
      "color": "#a31515",
      "content": "\"color.grep.matchcontext\""
    },
    {
      "color": "#000000",
      "content": ",value,cb)<0)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "-1;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(grep_config("
    },
    {
      "color": "#a31515",
      "content": "\"color.grep.matchselected\""
    },
    {
      "color": "#000000",
      "content": ",value,cb)<0)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "-1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(skip_prefix(var,"
    },
    {
      "color": "#a31515",
      "content": "\"color.grep.\""
    },
    {
      "color": "#000000",
      "content": ",&slot)){"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "i=LOOKUP_CONFIG(color_grep_slots,slot);"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*color;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(i<0)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "-1;"
    },
    {
      "color": "#000000",
      "content": "color=opt->colors[i];"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!value)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "config_error_nonbool(var);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "color_parse(value,color);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Initializeoneinstanceofgrep_optandcopythe"
    },
    {
      "color": "#008000",
      "content": "*defaultvaluesfromthetemplatewereadtheconfiguration"
    },
    {
      "color": "#008000",
      "content": "*informationinanearliercalltogit_config(grep_config)."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "grep_init("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "repository*"
    },
    {
      "color": "#808080",
      "content": "repo"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "prefix"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "*opt=grep_defaults;"
    },
    {
      "color": "#000000",
      "content": "opt->repo=repo;"
    },
    {
      "color": "#000000",
      "content": "opt->prefix=prefix;"
    },
    {
      "color": "#000000",
      "content": "opt->prefix_length=(prefix&&*prefix)?strlen(prefix):0;"
    },
    {
      "color": "#000000",
      "content": "opt->pattern_tail=&opt->pattern_list;"
    },
    {
      "color": "#000000",
      "content": "opt->header_tail=&opt->header_list;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "grep_set_pattern_type_option("
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_pattern_type"
    },
    {
      "color": "#808080",
      "content": "pattern_type"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Whencommittingtothepatterntypebysettingtherelevant"
    },
    {
      "color": "#008000",
      "content": "*fieldsingrep_optit'sgenerallynotnecessarytozeroout"
    },
    {
      "color": "#008000",
      "content": "*thefieldswe'renotchoosing,sincetheywon'thavebeen"
    },
    {
      "color": "#008000",
      "content": "*setbyanything.Theextended_regexp_optionfieldisthe"
    },
    {
      "color": "#008000",
      "content": "*onlyexceptiontothis."
    },
    {
      "color": "#008000",
      "content": "*"
    },
    {
      "color": "#008000",
      "content": "*Thisisbecauseintheprocessofparsinggrep.patternType"
    },
    {
      "color": "#008000",
      "content": "*&grep.extendedRegexpwesetopt->pattern_type_optionand"
    },
    {
      "color": "#008000",
      "content": "*opt->extended_regexp_option,respectively.Wethen"
    },
    {
      "color": "#008000",
      "content": "*internallyuseopt->extended_regexp_optiontoseeifwe're"
    },
    {
      "color": "#008000",
      "content": "*compilinganERE.Itmustbeunsetifthat'snotactually"
    },
    {
      "color": "#008000",
      "content": "*thecase."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(pattern_type!=GREP_PATTERN_TYPE_ERE&&"
    },
    {
      "color": "#000000",
      "content": "opt->extended_regexp_option)"
    },
    {
      "color": "#000000",
      "content": "opt->extended_regexp_option=0;"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(pattern_type){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_TYPE_UNSPECIFIED:"
    },
    {
      "color": "#008000",
      "content": "/*fallthrough*/"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_TYPE_BRE:"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_TYPE_ERE:"
    },
    {
      "color": "#000000",
      "content": "opt->extended_regexp_option=1;"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_TYPE_FIXED:"
    },
    {
      "color": "#000000",
      "content": "opt->fixed=1;"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_TYPE_PCRE:"
    },
    {
      "color": "#000000",
      "content": "opt->pcre2=1;"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "grep_commit_pattern_type("
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_pattern_type"
    },
    {
      "color": "#808080",
      "content": "pattern_type"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(pattern_type!=GREP_PATTERN_TYPE_UNSPECIFIED)"
    },
    {
      "color": "#000000",
      "content": "grep_set_pattern_type_option(pattern_type,opt);"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->pattern_type_option!=GREP_PATTERN_TYPE_UNSPECIFIED)"
    },
    {
      "color": "#000000",
      "content": "grep_set_pattern_type_option(opt->pattern_type_option,opt);"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->extended_regexp_option)"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Thisbranch*must*happenaftersettingfromthe"
    },
    {
      "color": "#008000",
      "content": "*opt->pattern_type_optionabove,wedon'twant"
    },
    {
      "color": "#008000",
      "content": "*grep.extendedRegexptooverridegrep.patternType!"
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "grep_set_pattern_type_option(GREP_PATTERN_TYPE_ERE,opt);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*create_grep_pat("
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "pat"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#808080",
      "content": "patlen"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "origin"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "no"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_pat_token"
    },
    {
      "color": "#808080",
      "content": "t"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_header_field"
    },
    {
      "color": "#808080",
      "content": "field"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p=xcalloc(1,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(*p));"
    },
    {
      "color": "#000000",
      "content": "p->pattern=xmemdupz(pat,patlen);"
    },
    {
      "color": "#000000",
      "content": "p->patternlen=patlen;"
    },
    {
      "color": "#000000",
      "content": "p->origin=origin;"
    },
    {
      "color": "#000000",
      "content": "p->no=no;"
    },
    {
      "color": "#000000",
      "content": "p->token=t;"
    },
    {
      "color": "#000000",
      "content": "p->field=field;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "p;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "do_append_grep_pat("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat***"
    },
    {
      "color": "#808080",
      "content": "tail"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "**tail=p;"
    },
    {
      "color": "#000000",
      "content": "*tail=&p->next;"
    },
    {
      "color": "#000000",
      "content": "p->next="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(p->token){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN:"
    },
    {
      "color": "#008000",
      "content": "/*atom*/"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_HEAD:"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_BODY:"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(;;){"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*new_pat;"
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#000000",
      "content": "len=0;"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*cp=p->pattern+p->patternlen,*nl="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(++len<=p->patternlen){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(*(--cp)=="
    },
    {
      "color": "#a31515",
      "content": "'\\n'"
    },
    {
      "color": "#000000",
      "content": "){"
    },
    {
      "color": "#000000",
      "content": "nl=cp;"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!nl)"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "new_pat=create_grep_pat(nl+1,len-1,p->origin,"
    },
    {
      "color": "#000000",
      "content": "p->no,p->token,p->field);"
    },
    {
      "color": "#000000",
      "content": "new_pat->next=p->next;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!p->next)"
    },
    {
      "color": "#000000",
      "content": "*tail=&new_pat->next;"
    },
    {
      "color": "#000000",
      "content": "p->next=new_pat;"
    },
    {
      "color": "#000000",
      "content": "*nl="
    },
    {
      "color": "#a31515",
      "content": "'\\0'"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "p->patternlen-=len;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "default"
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "append_header_grep_pattern("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_header_field"
    },
    {
      "color": "#808080",
      "content": "field"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "pat"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p=create_grep_pat(pat,strlen(pat),"
    },
    {
      "color": "#a31515",
      "content": "\"header\""
    },
    {
      "color": "#000000",
      "content": ",0,"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_HEAD,field);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(field==GREP_HEADER_REFLOG)"
    },
    {
      "color": "#000000",
      "content": "opt->use_reflog_filter=1;"
    },
    {
      "color": "#000000",
      "content": "do_append_grep_pat(&opt->header_tail,p);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "append_grep_pattern("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "pat"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "origin"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "no"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_pat_token"
    },
    {
      "color": "#808080",
      "content": "t"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "append_grep_pat(opt,pat,strlen(pat),origin,no,t);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "append_grep_pat("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "pat"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#808080",
      "content": "patlen"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "origin"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "no"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_pat_token"
    },
    {
      "color": "#808080",
      "content": "t"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p=create_grep_pat(pat,patlen,origin,no,t,0);"
    },
    {
      "color": "#000000",
      "content": "do_append_grep_pat(&opt->pattern_tail,p);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*grep_opt_dup("
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*pat;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*ret=xmalloc("
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt));"
    },
    {
      "color": "#000000",
      "content": "*ret=*opt;"
    },
    {
      "color": "#000000",
      "content": "ret->pattern_list="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "ret->pattern_tail=&ret->pattern_list;"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(pat=opt->pattern_list;pat!="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";pat=pat->next)"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(pat->token==GREP_PATTERN_HEAD)"
    },
    {
      "color": "#000000",
      "content": "append_header_grep_pattern(ret,pat->field,"
    },
    {
      "color": "#000000",
      "content": "pat->pattern);"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "append_grep_pat(ret,pat->pattern,pat->patternlen,"
    },
    {
      "color": "#000000",
      "content": "pat->origin,pat->no,pat->token);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "ret;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#000000",
      "content": "NORETURN"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "compile_regexp_failed("
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "error"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "where[1024];"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->no)"
    },
    {
      "color": "#000000",
      "content": "xsnprintf(where,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(where),"
    },
    {
      "color": "#a31515",
      "content": "\"In'%s'at%d,\""
    },
    {
      "color": "#000000",
      "content": ",p->origin,p->no);"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->origin)"
    },
    {
      "color": "#000000",
      "content": "xsnprintf(where,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(where),"
    },
    {
      "color": "#a31515",
      "content": "\"%s,\""
    },
    {
      "color": "#000000",
      "content": ",p->origin);"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "where[0]=0;"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"%s'%s':%s\""
    },
    {
      "color": "#000000",
      "content": ",where,p->pattern,error);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "is_fixed("
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "s"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#808080",
      "content": "len"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#000000",
      "content": "i;"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(i=0;i<len;i++){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(is_regex_special(s[i]))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#808080",
      "content": "#ifdef"
    },
    {
      "color": "#bd63c5",
      "content": "USE_LIBPCRE2"
    },
    {
      "color": "#808080",
      "content": "#define"
    },
    {
      "color": "#bd63c5",
      "content": "GREP_PCRE2_DEBUG_MALLOC"
    },
    {
      "color": "#000000",
      "content": "0"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "*pcre2_malloc(PCRE2_SIZE"
    },
    {
      "color": "#808080",
      "content": "size"
    },
    {
      "color": "#000000",
      "content": ",MAYBE_UNUSED"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "memory_data"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "*pointer=malloc(size);"
    },
    {
      "color": "#808080",
      "content": "#if"
    },
    {
      "color": "#bd63c5",
      "content": "GREP_PCRE2_DEBUG_MALLOC"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "count=1;"
    },
    {
      "color": "#000000",
      "content": "fprintf(stderr,"
    },
    {
      "color": "#a31515",
      "content": "\"PCRE2:%p->#%02d:alloc(%lu)\\n\""
    },
    {
      "color": "#000000",
      "content": ",pointer,count++,size);"
    },
    {
      "color": "#808080",
      "content": "#endif"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "pointer;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "pcre2_free("
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "pointer"
    },
    {
      "color": "#000000",
      "content": ",MAYBE_UNUSED"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "memory_data"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#808080",
      "content": "#if"
    },
    {
      "color": "#bd63c5",
      "content": "GREP_PCRE2_DEBUG_MALLOC"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "count=1;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(pointer)"
    },
    {
      "color": "#000000",
      "content": "fprintf(stderr,"
    },
    {
      "color": "#a31515",
      "content": "\"PCRE2:%p->#%02d:free()\\n\""
    },
    {
      "color": "#000000",
      "content": ",pointer,count++);"
    },
    {
      "color": "#808080",
      "content": "#endif"
    },
    {
      "color": "#000000",
      "content": "free(pointer);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "compile_pcre2_pattern("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "error;"
    },
    {
      "color": "#000000",
      "content": "PCRE2_UCHARerrbuf[256];"
    },
    {
      "color": "#000000",
      "content": "PCRE2_SIZEerroffset;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "options=PCRE2_MULTILINE;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "jitret;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "patinforet;"
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#000000",
      "content": "jitsizearg;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "literal=!opt->ignore_case&&(p->fixed||p->is_fixed);"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Callpcre2_general_context_create()beforecallingany"
    },
    {
      "color": "#008000",
      "content": "*otherpcre2_*().Itsetsupourmalloc()/free()functions"
    },
    {
      "color": "#008000",
      "content": "*withwhicheverythingelseisallocated."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "p->pcre2_general_context=pcre2_general_context_create("
    },
    {
      "color": "#000000",
      "content": "pcre2_malloc,pcre2_free,"
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!p->pcre2_general_context)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"Couldn'tallocatePCRE2generalcontext\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->ignore_case){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->ignore_locale&&has_non_ascii(p->pattern)){"
    },
    {
      "color": "#000000",
      "content": "p->pcre2_tables=pcre2_maketables(p->pcre2_general_context);"
    },
    {
      "color": "#000000",
      "content": "p->pcre2_compile_context=pcre2_compile_context_create(p->pcre2_general_context);"
    },
    {
      "color": "#000000",
      "content": "pcre2_set_character_tables(p->pcre2_compile_context,"
    },
    {
      "color": "#000000",
      "content": "p->pcre2_tables);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "options|=PCRE2_CASELESS;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->ignore_locale&&is_utf8_locale()&&!literal)"
    },
    {
      "color": "#000000",
      "content": "options|=(PCRE2_UTF|PCRE2_MATCH_INVALID_UTF);"
    },
    {
      "color": "#808080",
      "content": "#ifdef"
    },
    {
      "color": "#bd63c5",
      "content": "GIT_PCRE2_VERSION_10_36_OR_HIGHER"
    },
    {
      "color": "#008000",
      "content": "/*Workaroundhttps://bugs.exim.org/show_bug.cgi?id=2642fixedin10.36*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(PCRE2_MATCH_INVALID_UTF&&options&(PCRE2_UTF|PCRE2_CASELESS))"
    },
    {
      "color": "#000000",
      "content": "options|=PCRE2_NO_START_OPTIMIZE;"
    },
    {
      "color": "#808080",
      "content": "#endif"
    },
    {
      "color": "#000000",
      "content": "p->pcre2_pattern=pcre2_compile((PCRE2_SPTR)p->pattern,"
    },
    {
      "color": "#000000",
      "content": "p->patternlen,options,&error,&erroffset,"
    },
    {
      "color": "#000000",
      "content": "p->pcre2_compile_context);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->pcre2_pattern){"
    },
    {
      "color": "#000000",
      "content": "p->pcre2_match_data=pcre2_match_data_create_from_pattern(p->pcre2_pattern,p->pcre2_general_context);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!p->pcre2_match_data)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"Couldn'tallocatePCRE2matchdata\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "pcre2_get_error_message(error,errbuf,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(errbuf));"
    },
    {
      "color": "#000000",
      "content": "compile_regexp_failed(p,("
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*)&errbuf);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "pcre2_config(PCRE2_CONFIG_JIT,&p->pcre2_jit_on);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->pcre2_jit_on){"
    },
    {
      "color": "#000000",
      "content": "jitret=pcre2_jit_compile(p->pcre2_pattern,PCRE2_JIT_COMPLETE);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(jitret)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"Couldn'tJITthePCRE2pattern'%s',got'%d'\\n\""
    },
    {
      "color": "#000000",
      "content": ",p->pattern,jitret);"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Thepcre2_config(PCRE2_CONFIG_JIT,...)calljust"
    },
    {
      "color": "#008000",
      "content": "*tellsuswhetherthelibraryitselfsupportsJIT,"
    },
    {
      "color": "#008000",
      "content": "*buttoseewhetherwe'regoingtobeactuallyusing"
    },
    {
      "color": "#008000",
      "content": "*JITweneedtoextractPCRE2_INFO_JITSIZEfromthe"
    },
    {
      "color": "#008000",
      "content": "*pattern*after*wedopcre2_jit_compile()above."
    },
    {
      "color": "#008000",
      "content": "*"
    },
    {
      "color": "#008000",
      "content": "*Thisisbecauseifthepatterncontainsthe"
    },
    {
      "color": "#008000",
      "content": "*(*NO_JIT)verb(seepcre2syntax(3))"
    },
    {
      "color": "#008000",
      "content": "*pcre2_jit_compile()willexitearlywith0.Ifwe"
    },
    {
      "color": "#008000",
      "content": "*thenproceedtocallpcre2_jit_match()furtherdown"
    },
    {
      "color": "#008000",
      "content": "*thelineinsteadofpcre2_match()we'lleither"
    },
    {
      "color": "#008000",
      "content": "*segfault(prePCRE10.31)orrunintoafatalerror"
    },
    {
      "color": "#008000",
      "content": "*(postPCRE210.31)"
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "patinforet=pcre2_pattern_info(p->pcre2_pattern,PCRE2_INFO_JITSIZE,&jitsizearg);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(patinforet)"
    },
    {
      "color": "#000000",
      "content": "BUG("
    },
    {
      "color": "#a31515",
      "content": "\"pcre2_pattern_info()failed:%d\""
    },
    {
      "color": "#000000",
      "content": ",patinforet);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(jitsizearg==0){"
    },
    {
      "color": "#000000",
      "content": "p->pcre2_jit_on=0;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "pcre2match("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "line"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "regmatch_t*"
    },
    {
      "color": "#808080",
      "content": "match"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "eflags"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "ret,flags=0;"
    },
    {
      "color": "#000000",
      "content": "PCRE2_SIZE*ovector;"
    },
    {
      "color": "#000000",
      "content": "PCRE2_UCHARerrbuf[256];"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(eflags&REG_NOTBOL)"
    },
    {
      "color": "#000000",
      "content": "flags|=PCRE2_NOTBOL;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->pcre2_jit_on)"
    },
    {
      "color": "#000000",
      "content": "ret=pcre2_jit_match(p->pcre2_pattern,("
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*)line,"
    },
    {
      "color": "#000000",
      "content": "eol-line,0,flags,p->pcre2_match_data,"
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "ret=pcre2_match(p->pcre2_pattern,("
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*)line,"
    },
    {
      "color": "#000000",
      "content": "eol-line,0,flags,p->pcre2_match_data,"
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(ret<0&&ret!=PCRE2_ERROR_NOMATCH){"
    },
    {
      "color": "#000000",
      "content": "pcre2_get_error_message(ret,errbuf,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(errbuf));"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"%sfailedwitherrorcode%d:%s\""
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "(p->pcre2_jit_on?"
    },
    {
      "color": "#a31515",
      "content": "\"pcre2_jit_match\""
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#a31515",
      "content": "\"pcre2_match\""
    },
    {
      "color": "#000000",
      "content": "),ret,"
    },
    {
      "color": "#000000",
      "content": "errbuf);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(ret>0){"
    },
    {
      "color": "#000000",
      "content": "ovector=pcre2_get_ovector_pointer(p->pcre2_match_data);"
    },
    {
      "color": "#000000",
      "content": "ret=0;"
    },
    {
      "color": "#000000",
      "content": "match->rm_so=("
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": ")ovector[0];"
    },
    {
      "color": "#000000",
      "content": "match->rm_eo=("
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": ")ovector[1];"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "ret;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "free_pcre2_pattern("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "pcre2_compile_context_free(p->pcre2_compile_context);"
    },
    {
      "color": "#000000",
      "content": "pcre2_code_free(p->pcre2_pattern);"
    },
    {
      "color": "#000000",
      "content": "pcre2_match_data_free(p->pcre2_match_data);"
    },
    {
      "color": "#808080",
      "content": "#ifdef"
    },
    {
      "color": "#bd63c5",
      "content": "GIT_PCRE2_VERSION_10_34_OR_HIGHER"
    },
    {
      "color": "#000000",
      "content": "pcre2_maketables_free(p->pcre2_general_context,p->pcre2_tables);"
    },
    {
      "color": "#808080",
      "content": "#else"
    },
    {
      "color": "#000000",
      "content": "free(("
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "*)p->pcre2_tables);"
    },
    {
      "color": "#808080",
      "content": "#endif"
    },
    {
      "color": "#000000",
      "content": "pcre2_general_context_free(p->pcre2_general_context);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#808080",
      "content": "#else"
    },
    {
      "color": "#008000",
      "content": "/*!USE_LIBPCRE2*/"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "compile_pcre2_pattern("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"cannotusePerl-compatibleregexeswhennotcompiledwithUSE_LIBPCRE\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "pcre2match("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "line"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "regmatch_t*"
    },
    {
      "color": "#808080",
      "content": "match"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "eflags"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "free_pcre2_pattern("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "compile_fixed_regexp("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "strbufsb=STRBUF_INIT;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "err;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "regflags=0;"
    },
    {
      "color": "#000000",
      "content": "basic_regex_quote_buf(&sb,p->pattern);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->ignore_case)"
    },
    {
      "color": "#000000",
      "content": "regflags|=REG_ICASE;"
    },
    {
      "color": "#000000",
      "content": "err=regcomp(&p->regexp,sb.buf,regflags);"
    },
    {
      "color": "#000000",
      "content": "strbuf_release(&sb);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(err){"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "errbuf[1024];"
    },
    {
      "color": "#000000",
      "content": "regerror(err,&p->regexp,errbuf,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(errbuf));"
    },
    {
      "color": "#000000",
      "content": "compile_regexp_failed(p,errbuf);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#808080",
      "content": "#endif"
    },
    {
      "color": "#008000",
      "content": "/*!USE_LIBPCRE2*/"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "compile_regexp("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "err;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "regflags=REG_NEWLINE;"
    },
    {
      "color": "#000000",
      "content": "p->word_regexp=opt->word_regexp;"
    },
    {
      "color": "#000000",
      "content": "p->ignore_case=opt->ignore_case;"
    },
    {
      "color": "#000000",
      "content": "p->fixed=opt->fixed;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(memchr(p->pattern,0,p->patternlen)&&!opt->pcre2)"
    },
    {
      "color": "#000000",
      "content": "die(_("
    },
    {
      "color": "#a31515",
      "content": "\"givenpatterncontainsNULLbyte(via-f<file>).Thisisonlysupportedwith-PunderPCREv2\""
    },
    {
      "color": "#000000",
      "content": "));"
    },
    {
      "color": "#000000",
      "content": "p->is_fixed=is_fixed(p->pattern,p->patternlen);"
    },
    {
      "color": "#808080",
      "content": "#ifdef"
    },
    {
      "color": "#bd63c5",
      "content": "USE_LIBPCRE2"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!p->fixed&&!p->is_fixed){"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*no_jit="
    },
    {
      "color": "#a31515",
      "content": "\"(*NO_JIT)\""
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "no_jit_len=strlen(no_jit);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(starts_with(p->pattern,no_jit)&&"
    },
    {
      "color": "#000000",
      "content": "is_fixed(p->pattern+no_jit_len,"
    },
    {
      "color": "#000000",
      "content": "p->patternlen-no_jit_len))"
    },
    {
      "color": "#000000",
      "content": "p->is_fixed=1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#808080",
      "content": "#endif"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->fixed||p->is_fixed){"
    },
    {
      "color": "#808080",
      "content": "#ifdef"
    },
    {
      "color": "#bd63c5",
      "content": "USE_LIBPCRE2"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->is_fixed){"
    },
    {
      "color": "#000000",
      "content": "compile_pcre2_pattern(p,opt);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*E.g.t7811-grep-open.shreliesonthe"
    },
    {
      "color": "#008000",
      "content": "*patternbeingrestored."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*old_pattern=p->pattern;"
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#000000",
      "content": "old_patternlen=p->patternlen;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "strbufsb=STRBUF_INIT;"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*ThereisthePCRE2_LITERALflag,butit's"
    },
    {
      "color": "#008000",
      "content": "*onlyinPCREv210.30andlater.Needingto"
    },
    {
      "color": "#008000",
      "content": "*ifdefourwayaroundthatanddealingwith"
    },
    {
      "color": "#008000",
      "content": "*it+PCRE2_MULTILINEbeinganerrorismore"
    },
    {
      "color": "#008000",
      "content": "*complexthanjustquotingthisourselves."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "strbuf_add(&sb,"
    },
    {
      "color": "#a31515",
      "content": "\"\\\\Q\""
    },
    {
      "color": "#000000",
      "content": ",2);"
    },
    {
      "color": "#000000",
      "content": "strbuf_add(&sb,p->pattern,p->patternlen);"
    },
    {
      "color": "#000000",
      "content": "strbuf_add(&sb,"
    },
    {
      "color": "#a31515",
      "content": "\"\\\\E\""
    },
    {
      "color": "#000000",
      "content": ",2);"
    },
    {
      "color": "#000000",
      "content": "p->pattern=sb.buf;"
    },
    {
      "color": "#000000",
      "content": "p->patternlen=sb.len;"
    },
    {
      "color": "#000000",
      "content": "compile_pcre2_pattern(p,opt);"
    },
    {
      "color": "#000000",
      "content": "p->pattern=old_pattern;"
    },
    {
      "color": "#000000",
      "content": "p->patternlen=old_patternlen;"
    },
    {
      "color": "#000000",
      "content": "strbuf_release(&sb);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#808080",
      "content": "#else"
    },
    {
      "color": "#008000",
      "content": "/*!USE_LIBPCRE2*/"
    },
    {
      "color": "#000000",
      "content": "compile_fixed_regexp(p,opt);"
    },
    {
      "color": "#808080",
      "content": "#endif"
    },
    {
      "color": "#008000",
      "content": "/*!USE_LIBPCRE2*/"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->pcre2){"
    },
    {
      "color": "#000000",
      "content": "compile_pcre2_pattern(p,opt);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->ignore_case)"
    },
    {
      "color": "#000000",
      "content": "regflags|=REG_ICASE;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->extended_regexp_option)"
    },
    {
      "color": "#000000",
      "content": "regflags|=REG_EXTENDED;"
    },
    {
      "color": "#000000",
      "content": "err=regcomp(&p->regexp,p->pattern,regflags);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(err){"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "errbuf[1024];"
    },
    {
      "color": "#000000",
      "content": "regerror(err,&p->regexp,errbuf,1024);"
    },
    {
      "color": "#000000",
      "content": "compile_regexp_failed(p,errbuf);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*grep_not_expr("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "expr"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*z=xcalloc(1,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(*z));"
    },
    {
      "color": "#000000",
      "content": "z->node=GREP_NODE_NOT;"
    },
    {
      "color": "#000000",
      "content": "z->u.unary=expr;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "z;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*grep_binexp("
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_expr_node"
    },
    {
      "color": "#808080",
      "content": "kind"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "left"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "right"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*z=xcalloc(1,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(*z));"
    },
    {
      "color": "#000000",
      "content": "z->node=kind;"
    },
    {
      "color": "#000000",
      "content": "z->u.binary.left=left;"
    },
    {
      "color": "#000000",
      "content": "z->u.binary.right=right;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "z;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*grep_or_expr("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "left"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "right"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "grep_binexp(GREP_NODE_OR,left,right);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*grep_and_expr("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "left"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "right"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "grep_binexp(GREP_NODE_AND,left,right);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*compile_pattern_or("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat**);"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*compile_pattern_atom("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat**"
    },
    {
      "color": "#808080",
      "content": "list"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*x;"
    },
    {
      "color": "#000000",
      "content": "p=*list;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!p)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(p->token){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN:"
    },
    {
      "color": "#008000",
      "content": "/*atom*/"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_HEAD:"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_BODY:"
    },
    {
      "color": "#000000",
      "content": "CALLOC_ARRAY(x,1);"
    },
    {
      "color": "#000000",
      "content": "x->node=GREP_NODE_ATOM;"
    },
    {
      "color": "#000000",
      "content": "x->u.atom=p;"
    },
    {
      "color": "#000000",
      "content": "*list=p->next;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "x;"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_OPEN_PAREN:"
    },
    {
      "color": "#000000",
      "content": "*list=p->next;"
    },
    {
      "color": "#000000",
      "content": "x=compile_pattern_or(list);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!*list||(*list)->token!=GREP_CLOSE_PAREN)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"unmatchedparenthesis\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "*list=(*list)->next;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "x;"
    },
    {
      "color": "#0000ff",
      "content": "default"
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*compile_pattern_not("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat**"
    },
    {
      "color": "#808080",
      "content": "list"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*x;"
    },
    {
      "color": "#000000",
      "content": "p=*list;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!p)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(p->token){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_NOT:"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!p->next)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"--notnotfollowedbypatternexpression\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "*list=p->next;"
    },
    {
      "color": "#000000",
      "content": "x=compile_pattern_not(list);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!x)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"--notfollowedbynonpatternexpression\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "grep_not_expr(x);"
    },
    {
      "color": "#0000ff",
      "content": "default"
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "compile_pattern_atom(list);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*compile_pattern_and("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat**"
    },
    {
      "color": "#808080",
      "content": "list"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*x,*y;"
    },
    {
      "color": "#000000",
      "content": "x=compile_pattern_not(list);"
    },
    {
      "color": "#000000",
      "content": "p=*list;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p&&p->token==GREP_AND){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!x)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"--andnotprecededbypatternexpression\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!p->next)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"--andnotfollowedbypatternexpression\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "*list=p->next;"
    },
    {
      "color": "#000000",
      "content": "y=compile_pattern_and(list);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!y)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"--andnotfollowedbypatternexpression\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "grep_and_expr(x,y);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "x;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*compile_pattern_or("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat**"
    },
    {
      "color": "#808080",
      "content": "list"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*x,*y;"
    },
    {
      "color": "#000000",
      "content": "x=compile_pattern_and(list);"
    },
    {
      "color": "#000000",
      "content": "p=*list;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(x&&p&&p->token!=GREP_CLOSE_PAREN){"
    },
    {
      "color": "#000000",
      "content": "y=compile_pattern_or(list);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!y)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"notapatternexpression%s\""
    },
    {
      "color": "#000000",
      "content": ",p->pattern);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "grep_or_expr(x,y);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "x;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*compile_pattern_expr("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat**"
    },
    {
      "color": "#808080",
      "content": "list"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "compile_pattern_or(list);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*grep_true_expr("
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*z=xcalloc(1,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(*z));"
    },
    {
      "color": "#000000",
      "content": "z->node=GREP_NODE_TRUE;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "z;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*prep_header_patterns("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*header_expr;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*(header_group[GREP_HEADER_FIELD_MAX]);"
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_header_fieldfld;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->header_list)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(p=opt->header_list;p;p=p->next){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->token!=GREP_PATTERN_HEAD)"
    },
    {
      "color": "#000000",
      "content": "BUG("
    },
    {
      "color": "#a31515",
      "content": "\"anon-headerpatterningrepheaderlist.\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->field<GREP_HEADER_FIELD_MIN||"
    },
    {
      "color": "#000000",
      "content": "GREP_HEADER_FIELD_MAX<=p->field)"
    },
    {
      "color": "#000000",
      "content": "BUG("
    },
    {
      "color": "#a31515",
      "content": "\"unknownheaderfield%d\""
    },
    {
      "color": "#000000",
      "content": ",p->field);"
    },
    {
      "color": "#000000",
      "content": "compile_regexp(p,opt);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(fld=0;fld<GREP_HEADER_FIELD_MAX;fld++)"
    },
    {
      "color": "#000000",
      "content": "header_group[fld]="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(p=opt->header_list;p;p=p->next){"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*h;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*pp=p;"
    },
    {
      "color": "#000000",
      "content": "h=compile_pattern_atom(&pp);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!h||pp!=p->next)"
    },
    {
      "color": "#000000",
      "content": "BUG("
    },
    {
      "color": "#a31515",
      "content": "\"malformedheaderexpr\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!header_group[p->field]){"
    },
    {
      "color": "#000000",
      "content": "header_group[p->field]=h;"
    },
    {
      "color": "#0000ff",
      "content": "continue"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "header_group[p->field]=grep_or_expr(h,header_group[p->field]);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "header_expr="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(fld=0;fld<GREP_HEADER_FIELD_MAX;fld++){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!header_group[fld])"
    },
    {
      "color": "#0000ff",
      "content": "continue"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!header_expr)"
    },
    {
      "color": "#000000",
      "content": "header_expr=grep_true_expr();"
    },
    {
      "color": "#000000",
      "content": "header_expr=grep_or_expr(header_group[fld],header_expr);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "header_expr;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*grep_splice_or("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "x"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "y"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*z=x;"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(x){"
    },
    {
      "color": "#000000",
      "content": "assert(x->node==GREP_NODE_OR);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(x->u.binary.right&&"
    },
    {
      "color": "#000000",
      "content": "x->u.binary.right->node==GREP_NODE_TRUE){"
    },
    {
      "color": "#000000",
      "content": "x->u.binary.right=y;"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "x=x->u.binary.right;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "z;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "compile_grep_patterns("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*header_expr=prep_header_patterns(opt);"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(p=opt->pattern_list;p;p=p->next){"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(p->token){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN:"
    },
    {
      "color": "#008000",
      "content": "/*atom*/"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_HEAD:"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_BODY:"
    },
    {
      "color": "#000000",
      "content": "compile_regexp(p,opt);"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "default"
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#000000",
      "content": "opt->extended=1;"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->all_match||opt->no_body_match||header_expr)"
    },
    {
      "color": "#000000",
      "content": "opt->extended=1;"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->extended)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "p=opt->pattern_list;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p)"
    },
    {
      "color": "#000000",
      "content": "opt->pattern_expression=compile_pattern_expr(&p);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"incompletepatternexpression:%s\""
    },
    {
      "color": "#000000",
      "content": ",p->pattern);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->no_body_match&&opt->pattern_expression)"
    },
    {
      "color": "#000000",
      "content": "opt->pattern_expression=grep_not_expr(opt->pattern_expression);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!header_expr)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->pattern_expression)"
    },
    {
      "color": "#000000",
      "content": "opt->pattern_expression=header_expr;"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->all_match)"
    },
    {
      "color": "#000000",
      "content": "opt->pattern_expression=grep_splice_or(header_expr,"
    },
    {
      "color": "#000000",
      "content": "opt->pattern_expression);"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "opt->pattern_expression=grep_or_expr(opt->pattern_expression,"
    },
    {
      "color": "#000000",
      "content": "header_expr);"
    },
    {
      "color": "#000000",
      "content": "opt->all_match=1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "free_pattern_expr("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "x"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(x->node){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_NODE_TRUE:"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_NODE_ATOM:"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_NODE_NOT:"
    },
    {
      "color": "#000000",
      "content": "free_pattern_expr(x->u.unary);"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_NODE_AND:"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_NODE_OR:"
    },
    {
      "color": "#000000",
      "content": "free_pattern_expr(x->u.binary.left);"
    },
    {
      "color": "#000000",
      "content": "free_pattern_expr(x->u.binary.right);"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "free(x);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "free_grep_patterns("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p,*n;"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(p=opt->pattern_list;p;p=n){"
    },
    {
      "color": "#000000",
      "content": "n=p->next;"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(p->token){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN:"
    },
    {
      "color": "#008000",
      "content": "/*atom*/"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_HEAD:"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_BODY:"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->pcre2_pattern)"
    },
    {
      "color": "#000000",
      "content": "free_pcre2_pattern(p);"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "regfree(&p->"
    },
    {
      "color": "#808080",
      "content": "regexp"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "free(p->"
    },
    {
      "color": "#808080",
      "content": "pattern"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "default"
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "free(p);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->extended)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "free_pattern_expr(opt->pattern_expression);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*end_of_line("
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "cp"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#0000ff",
      "content": "long"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "left"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#0000ff",
      "content": "long"
    },
    {
      "color": "#000000",
      "content": "l=*left;"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(l&&*cp!="
    },
    {
      "color": "#a31515",
      "content": "'\\n'"
    },
    {
      "color": "#000000",
      "content": "){"
    },
    {
      "color": "#000000",
      "content": "l--;"
    },
    {
      "color": "#000000",
      "content": "cp++;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "*left=l;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "cp;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "word_char("
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#808080",
      "content": "ch"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "isalnum(ch)||ch=="
    },
    {
      "color": "#a31515",
      "content": "'_'"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "output_color("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "data"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#808080",
      "content": "size"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "color"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(want_color(opt->color)&&color&&color[0]){"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,color,strlen(color));"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,data,size);"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,GIT_COLOR_RESET,strlen(GIT_COLOR_RESET));"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,data,size);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "output_sep("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#808080",
      "content": "sign"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->null_following_name)"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,"
    },
    {
      "color": "#a31515",
      "content": "\"\\0\""
    },
    {
      "color": "#000000",
      "content": ",1);"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,&sign,1,opt->colors[GREP_COLOR_SEP]);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "show_name("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "name"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,name,strlen(name),opt->colors[GREP_COLOR_FILENAME]);"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,opt->null_following_name?"
    },
    {
      "color": "#a31515",
      "content": "\"\\0\""
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#a31515",
      "content": "\"\\n\""
    },
    {
      "color": "#000000",
      "content": ",1);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "patmatch("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "line"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "regmatch_t*"
    },
    {
      "color": "#808080",
      "content": "match"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "eflags"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "hit;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->pcre2_pattern)"
    },
    {
      "color": "#000000",
      "content": "hit=!pcre2match(p,line,eol,match,eflags);"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "hit=!regexec_buf(&p->regexp,line,eol-line,1,match,"
    },
    {
      "color": "#000000",
      "content": "eflags);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "hit;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "strip_timestamp("
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "**"
    },
    {
      "color": "#808080",
      "content": "eol_p"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*eol=*eol_p;"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(bol<--eol){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(*eol!="
    },
    {
      "color": "#a31515",
      "content": "'>'"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#0000ff",
      "content": "continue"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "*eol_p=++eol;"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*field;"
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#000000",
      "content": "len;"
    },
    {
      "color": "#000000",
      "content": "}header_field"
    },
    {
      "color": "#0000ff",
      "content": "[]"
    },
    {
      "color": "#000000",
      "content": "={"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#a31515",
      "content": "\"author\""
    },
    {
      "color": "#000000",
      "content": ",7},"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#a31515",
      "content": "\"committer\""
    },
    {
      "color": "#000000",
      "content": ",10},"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#a31515",
      "content": "\"reflog\""
    },
    {
      "color": "#000000",
      "content": ",7},"
    },
    {
      "color": "#000000",
      "content": "};"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "headerless_match_one_pattern("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_context"
    },
    {
      "color": "#808080",
      "content": "ctx"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "regmatch_t*"
    },
    {
      "color": "#808080",
      "content": "pmatch"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "eflags"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "hit=0;"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*start=bol;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "((p->token!=GREP_PATTERN)&&"
    },
    {
      "color": "#000000",
      "content": "((p->token==GREP_PATTERN_HEAD)!=(ctx==GREP_CONTEXT_HEAD)))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "again:"
    },
    {
      "color": "#000000",
      "content": "hit=patmatch(p,bol,eol,pmatch,eflags);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(hit&&p->word_regexp){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "((pmatch[0].rm_so<0)||"
    },
    {
      "color": "#000000",
      "content": "(eol-bol)<pmatch[0].rm_so||"
    },
    {
      "color": "#000000",
      "content": "(pmatch[0].rm_eo<0)||"
    },
    {
      "color": "#000000",
      "content": "(eol-bol)<pmatch[0].rm_eo)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"regexpreturnednonsense\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#008000",
      "content": "/*Matchbeginningmustbeeitherbeginningofthe"
    },
    {
      "color": "#008000",
      "content": "*line,oratwordboundary(i.e.thelastcharmust"
    },
    {
      "color": "#008000",
      "content": "*notbeawordchar).Similarly,matchendmustbe"
    },
    {
      "color": "#008000",
      "content": "*eitherendoftheline,oratwordboundary"
    },
    {
      "color": "#008000",
      "content": "*(i.e.thenextcharmustnotbeawordchar)."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(((pmatch[0].rm_so==0)||"
    },
    {
      "color": "#000000",
      "content": "!word_char(bol[pmatch[0].rm_so-1]))&&"
    },
    {
      "color": "#000000",
      "content": "((pmatch[0].rm_eo==(eol-bol))||"
    },
    {
      "color": "#000000",
      "content": "!word_char(bol[pmatch[0].rm_eo])))"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "hit=0;"
    },
    {
      "color": "#008000",
      "content": "/*Wordsconsistofatleastonecharacter.*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(pmatch->rm_so==pmatch->rm_eo)"
    },
    {
      "color": "#000000",
      "content": "hit=0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!hit&&pmatch[0].rm_so+bol+1<eol){"
    },
    {
      "color": "#008000",
      "content": "/*Therecouldbemorethanonematchonthe"
    },
    {
      "color": "#008000",
      "content": "*line,andthefirstmatchmightnotbe"
    },
    {
      "color": "#008000",
      "content": "*strictwordmatch.Butlateronescouldbe!"
    },
    {
      "color": "#008000",
      "content": "*Forwardtothenextpossiblestart,i.e.the"
    },
    {
      "color": "#008000",
      "content": "*nextpositionfollowinganon-wordchar."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "bol=pmatch[0].rm_so+bol+1;"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(word_char(bol[-1])&&bol<eol)"
    },
    {
      "color": "#000000",
      "content": "bol++;"
    },
    {
      "color": "#000000",
      "content": "eflags|=REG_NOTBOL;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(bol<eol)"
    },
    {
      "color": "#0000ff",
      "content": "goto"
    },
    {
      "color": "#000000",
      "content": "again;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(hit){"
    },
    {
      "color": "#000000",
      "content": "pmatch[0].rm_so+=bol-start;"
    },
    {
      "color": "#000000",
      "content": "pmatch[0].rm_eo+=bol-start;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "hit;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "match_one_pattern("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_context"
    },
    {
      "color": "#808080",
      "content": "ctx"
    },
    {
      "color": "#000000",
      "content": ",regmatch_t*"
    },
    {
      "color": "#808080",
      "content": "pmatch"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "eflags"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*field;"
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#000000",
      "content": "len;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->token==GREP_PATTERN_HEAD){"
    },
    {
      "color": "#000000",
      "content": "assert(p->field<ARRAY_SIZE(header_field));"
    },
    {
      "color": "#000000",
      "content": "field=header_field[p->field].field;"
    },
    {
      "color": "#000000",
      "content": "len=header_field[p->field].len;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(strncmp(bol,field,len))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "bol+=len;"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(p->field){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_HEADER_AUTHOR:"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_HEADER_COMMITTER:"
    },
    {
      "color": "#000000",
      "content": "strip_timestamp(bol,&"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "default"
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "headerless_match_one_pattern(p,bol,eol,ctx,pmatch,eflags);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "match_expr_eval("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "x"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_context"
    },
    {
      "color": "#808080",
      "content": "ctx"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "ssize_t"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "col"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "ssize_t"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "icol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "collect_hits"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "h=0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!x)"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"Notavalidgrepexpression\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(x->node){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_NODE_TRUE:"
    },
    {
      "color": "#000000",
      "content": "h=1;"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_NODE_ATOM:"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "regmatch_ttmp;"
    },
    {
      "color": "#000000",
      "content": "h=match_one_pattern(x->u.atom,bol,eol,ctx,"
    },
    {
      "color": "#000000",
      "content": "&tmp,0);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(h&&(*col<0||tmp.rm_so<*col))"
    },
    {
      "color": "#000000",
      "content": "*col=tmp.rm_so;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(x->u.atom->token==GREP_PATTERN_BODY)"
    },
    {
      "color": "#000000",
      "content": "opt->body_hit|=h;"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_NODE_NOT:"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*UponvisitingaGREP_NODE_NOT,colandicolbecomeswapped."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "h=!match_expr_eval(opt,x->u.unary,bol,eol,ctx,icol,col,"
    },
    {
      "color": "#000000",
      "content": "0);"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_NODE_AND:"
    },
    {
      "color": "#000000",
      "content": "h=match_expr_eval(opt,x->u.binary.left,bol,eol,ctx,col,"
    },
    {
      "color": "#000000",
      "content": "icol,0);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(h||opt->columnnum){"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Don'tshort-circuitANDwhengiven--column,sincea"
    },
    {
      "color": "#008000",
      "content": "*NOTearlierinthetreemayturnthisintoanOR.In"
    },
    {
      "color": "#008000",
      "content": "*thiscase,seethebelowcomment."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "h&=match_expr_eval(opt,x->u.binary.right,bol,eol,"
    },
    {
      "color": "#000000",
      "content": "ctx,col,icol,0);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_NODE_OR:"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!(collect_hits||opt->columnnum)){"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Don'tshort-circuitORwhengiven--column(or"
    },
    {
      "color": "#008000",
      "content": "*collectinghits)toensurewedon'tskipalater"
    },
    {
      "color": "#008000",
      "content": "*childthatwouldproduceanearliermatch."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "(match_expr_eval(opt,x->u.binary.left,bol,eol,"
    },
    {
      "color": "#000000",
      "content": "ctx,col,icol,0)||"
    },
    {
      "color": "#000000",
      "content": "match_expr_eval(opt,x->u.binary.right,bol,"
    },
    {
      "color": "#000000",
      "content": "eol,ctx,col,icol,0));"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "h=match_expr_eval(opt,x->u.binary.left,bol,eol,ctx,col,"
    },
    {
      "color": "#000000",
      "content": "icol,0);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(collect_hits)"
    },
    {
      "color": "#000000",
      "content": "x->u.binary.left->hit|=h;"
    },
    {
      "color": "#000000",
      "content": "h|=match_expr_eval(opt,x->u.binary.right,bol,eol,ctx,col,"
    },
    {
      "color": "#000000",
      "content": "icol,collect_hits);"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "default"
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#000000",
      "content": "die("
    },
    {
      "color": "#a31515",
      "content": "\"Unexpectednodetype(internalerror)%d\""
    },
    {
      "color": "#000000",
      "content": ",x->"
    },
    {
      "color": "#808080",
      "content": "node"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(collect_hits)"
    },
    {
      "color": "#000000",
      "content": "x->hit|=h;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "h;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "match_expr("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_context"
    },
    {
      "color": "#808080",
      "content": "ctx"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "ssize_t"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "col"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "ssize_t"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "icol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "collect_hits"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*x=opt->pattern_expression;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "match_expr_eval(opt,x,bol,eol,ctx,col,icol,collect_hits);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "match_line("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "ssize_t"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "col"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "ssize_t"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "icol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_context"
    },
    {
      "color": "#808080",
      "content": "ctx"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "collect_hits"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "hit=0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->extended)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "match_expr(opt,bol,eol,ctx,col,icol,"
    },
    {
      "color": "#000000",
      "content": "collect_hits);"
    },
    {
      "color": "#008000",
      "content": "/*wedonotcallwithcollect_hitswithoutbeingextended*/"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(p=opt->pattern_list;p;p=p->next){"
    },
    {
      "color": "#000000",
      "content": "regmatch_ttmp;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(match_one_pattern(p,bol,eol,ctx,&tmp,0)){"
    },
    {
      "color": "#000000",
      "content": "hit|=1;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->columnnum){"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Without--column,anysinglematchonaline"
    },
    {
      "color": "#008000",
      "content": "*isenoughtoknowthatitneedstobe"
    },
    {
      "color": "#008000",
      "content": "*printed.With--column,scan_all_patterns"
    },
    {
      "color": "#008000",
      "content": "*tofindtheearliest."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(*col<0||tmp.rm_so<*col)"
    },
    {
      "color": "#000000",
      "content": "*col=tmp.rm_so;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "hit;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "match_next_pattern("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*"
    },
    {
      "color": "#808080",
      "content": "p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_context"
    },
    {
      "color": "#808080",
      "content": "ctx"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#000000",
      "content": "regmatch_t*"
    },
    {
      "color": "#808080",
      "content": "pmatch"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "eflags"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "regmatch_tmatch;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!headerless_match_one_pattern(p,bol,eol,ctx,&match,eflags))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(match.rm_so<0||match.rm_eo<0)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(pmatch->rm_so>=0&&pmatch->rm_eo>=0){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(match.rm_so>pmatch->rm_so)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(match.rm_so==pmatch->rm_so&&match.rm_eo<pmatch->rm_eo)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "pmatch->rm_so=match.rm_so;"
    },
    {
      "color": "#000000",
      "content": "pmatch->rm_eo=match.rm_eo;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "grep_next_match("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_context"
    },
    {
      "color": "#808080",
      "content": "ctx"
    },
    {
      "color": "#000000",
      "content": ",regmatch_t*"
    },
    {
      "color": "#808080",
      "content": "pmatch"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_header_field"
    },
    {
      "color": "#808080",
      "content": "field"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "eflags"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "hit=0;"
    },
    {
      "color": "#000000",
      "content": "pmatch->rm_so=pmatch->rm_eo=-1;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(bol<eol){"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(p=((ctx==GREP_CONTEXT_HEAD)"
    },
    {
      "color": "#000000",
      "content": "?opt->header_list:opt->pattern_list);"
    },
    {
      "color": "#000000",
      "content": "p;p=p->next){"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(p->token){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_HEAD:"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "((field!=GREP_HEADER_FIELD_MAX)&&"
    },
    {
      "color": "#000000",
      "content": "(p->field!=field))"
    },
    {
      "color": "#0000ff",
      "content": "continue"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#008000",
      "content": "/*fallthru*/"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN:"
    },
    {
      "color": "#008000",
      "content": "/*atom*/"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_PATTERN_BODY:"
    },
    {
      "color": "#000000",
      "content": "hit|=match_next_pattern(p,bol,eol,ctx,"
    },
    {
      "color": "#000000",
      "content": "pmatch,eflags);"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "default"
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "hit;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "show_line_header("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "name"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#808080",
      "content": "lno"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "ssize_t"
    },
    {
      "color": "#808080",
      "content": "cno"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#808080",
      "content": "sign"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->heading&&opt->last_shown==0){"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,name,strlen(name),opt->colors[GREP_COLOR_FILENAME]);"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,"
    },
    {
      "color": "#a31515",
      "content": "\"\\n\""
    },
    {
      "color": "#000000",
      "content": ",1);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "opt->last_shown=lno;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->heading&&opt->pathname){"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,name,strlen(name),opt->colors[GREP_COLOR_FILENAME]);"
    },
    {
      "color": "#000000",
      "content": "output_sep(opt,sign);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->linenum){"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "buf[32];"
    },
    {
      "color": "#000000",
      "content": "xsnprintf(buf,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(buf),"
    },
    {
      "color": "#a31515",
      "content": "\"%d\""
    },
    {
      "color": "#000000",
      "content": ",lno);"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,buf,strlen(buf),opt->colors[GREP_COLOR_LINENO]);"
    },
    {
      "color": "#000000",
      "content": "output_sep(opt,sign);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Treat'cno'asthe1-indexedoffsetfromthestartofanon-context"
    },
    {
      "color": "#008000",
      "content": "*linetoitsfirstmatch.Otherwise,'cno'is0indicatingthatweare"
    },
    {
      "color": "#008000",
      "content": "*beingcalledwithacontextline."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->columnnum&&cno){"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "buf[32];"
    },
    {
      "color": "#000000",
      "content": "xsnprintf(buf,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(buf),"
    },
    {
      "color": "#a31515",
      "content": "\"%\""
    },
    {
      "color": "#000000",
      "content": "PRIuMAX,("
    },
    {
      "color": "#0000ff",
      "content": "uintmax_t"
    },
    {
      "color": "#000000",
      "content": ")cno);"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,buf,strlen(buf),opt->colors[GREP_COLOR_COLUMNNO]);"
    },
    {
      "color": "#000000",
      "content": "output_sep(opt,sign);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "show_line("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "name"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#808080",
      "content": "lno"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "ssize_t"
    },
    {
      "color": "#808080",
      "content": "cno"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#808080",
      "content": "sign"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "rest=eol-bol;"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*match_color="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*line_color="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->file_break&&opt->last_shown==0){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->show_hunk_mark)"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,"
    },
    {
      "color": "#a31515",
      "content": "\"\\n\""
    },
    {
      "color": "#000000",
      "content": ",1);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->pre_context||opt->post_context||opt->funcbody){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->last_shown==0){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->show_hunk_mark){"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,"
    },
    {
      "color": "#a31515",
      "content": "\"--\""
    },
    {
      "color": "#000000",
      "content": ",2,opt->colors[GREP_COLOR_SEP]);"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,"
    },
    {
      "color": "#a31515",
      "content": "\"\\n\""
    },
    {
      "color": "#000000",
      "content": ",1);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(lno>opt->last_shown+1){"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,"
    },
    {
      "color": "#a31515",
      "content": "\"--\""
    },
    {
      "color": "#000000",
      "content": ",2,opt->colors[GREP_COLOR_SEP]);"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,"
    },
    {
      "color": "#a31515",
      "content": "\"\\n\""
    },
    {
      "color": "#000000",
      "content": ",1);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->only_matching){"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Incasethelinewe'rebeingcalledwithcontainsmorethan"
    },
    {
      "color": "#008000",
      "content": "*onematch,leaveprintingeachheadertotheloopbelow."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "show_line_header(opt,name,lno,cno,sign);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->color||opt->only_matching){"
    },
    {
      "color": "#000000",
      "content": "regmatch_tmatch;"
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_contextctx=GREP_CONTEXT_BODY;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "eflags=0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->color){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(sign=="
    },
    {
      "color": "#a31515",
      "content": "':'"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "match_color=opt->colors[GREP_COLOR_MATCH_SELECTED];"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "match_color=opt->colors[GREP_COLOR_MATCH_CONTEXT];"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(sign=="
    },
    {
      "color": "#a31515",
      "content": "':'"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "line_color=opt->colors[GREP_COLOR_SELECTED];"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(sign=="
    },
    {
      "color": "#a31515",
      "content": "'-'"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "line_color=opt->colors[GREP_COLOR_CONTEXT];"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(sign=="
    },
    {
      "color": "#a31515",
      "content": "'='"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "line_color=opt->colors[GREP_COLOR_FUNCTION];"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(grep_next_match(opt,bol,eol,ctx,&match,"
    },
    {
      "color": "#000000",
      "content": "GREP_HEADER_FIELD_MAX,eflags)){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(match.rm_so==match.rm_eo)"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->only_matching)"
    },
    {
      "color": "#000000",
      "content": "show_line_header(opt,name,lno,cno,sign);"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,bol,match.rm_so,line_color);"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,bol+match.rm_so,"
    },
    {
      "color": "#000000",
      "content": "match.rm_eo-match.rm_so,match_color);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->only_matching)"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,"
    },
    {
      "color": "#a31515",
      "content": "\"\\n\""
    },
    {
      "color": "#000000",
      "content": ",1);"
    },
    {
      "color": "#000000",
      "content": "bol+=match.rm_eo;"
    },
    {
      "color": "#000000",
      "content": "cno+=match.rm_eo;"
    },
    {
      "color": "#000000",
      "content": "rest-=match.rm_eo;"
    },
    {
      "color": "#000000",
      "content": "eflags=REG_NOTBOL;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->only_matching){"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,bol,rest,line_color);"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,"
    },
    {
      "color": "#a31515",
      "content": "\"\\n\""
    },
    {
      "color": "#000000",
      "content": ",1);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "grep_use_locks;"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Thislockprotectsaccesstothegitattributesmachinery,whichis"
    },
    {
      "color": "#008000",
      "content": "*notthread-safe."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "pthread_mutex_t"
    },
    {
      "color": "#000000",
      "content": "grep_attr_mutex;"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "inline"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "grep_attr_lock("
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(grep_use_locks)"
    },
    {
      "color": "#000000",
      "content": "pthread_mutex_lock(&grep_attr_mutex);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "inline"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "grep_attr_unlock("
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(grep_use_locks)"
    },
    {
      "color": "#000000",
      "content": "pthread_mutex_unlock(&grep_attr_mutex);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "match_funcname("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "xdemitconf_t*xecfg=opt->priv;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(xecfg&&!xecfg->find_func){"
    },
    {
      "color": "#000000",
      "content": "grep_source_load_driver(gs,opt->repo->index);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(gs->driver->funcname.pattern){"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "userdiff_funcname*pe=&gs->driver->funcname;"
    },
    {
      "color": "#000000",
      "content": "xdiff_set_find_func(xecfg,pe->pattern,pe->cflags);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "xecfg=opt->priv="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(xecfg){"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "buf[1];"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "xecfg->find_func(bol,eol-bol,buf,1,"
    },
    {
      "color": "#000000",
      "content": "xecfg->find_func_priv)>=0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(bol==eol)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(isalpha(*bol)||*bol=="
    },
    {
      "color": "#a31515",
      "content": "'_'"
    },
    {
      "color": "#000000",
      "content": "||*bol=="
    },
    {
      "color": "#a31515",
      "content": "'$'"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "show_funcname_line("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#808080",
      "content": "lno"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(bol>gs->buf){"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*eol=--bol;"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(bol>gs->buf&&bol[-1]!="
    },
    {
      "color": "#a31515",
      "content": "'\\n'"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "bol--;"
    },
    {
      "color": "#000000",
      "content": "lno--;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(lno<=opt->last_shown)"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(match_funcname(opt,gs,bol,eol)){"
    },
    {
      "color": "#000000",
      "content": "show_line(opt,bol,eol,gs->name,lno,0,"
    },
    {
      "color": "#a31515",
      "content": "'='"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "is_empty_line("
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "show_pre_context("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "end"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#808080",
      "content": "lno"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#000000",
      "content": "cur=lno,from=1,funcname_lno=0,orig_from;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "funcname_needed=!!opt->funcname,comment_needed=0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->pre_context<lno)"
    },
    {
      "color": "#000000",
      "content": "from=lno-opt->pre_context;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(from<=opt->last_shown)"
    },
    {
      "color": "#000000",
      "content": "from=opt->last_shown+1;"
    },
    {
      "color": "#000000",
      "content": "orig_from=from;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->funcbody){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(match_funcname(opt,gs,bol,end))"
    },
    {
      "color": "#000000",
      "content": "comment_needed=1;"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "funcname_needed=1;"
    },
    {
      "color": "#000000",
      "content": "from=opt->last_shown+1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#008000",
      "content": "/*Rewind.*/"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(bol>gs->buf&&cur>from){"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*next_bol=bol;"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*eol=--bol;"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(bol>gs->buf&&bol[-1]!="
    },
    {
      "color": "#a31515",
      "content": "'\\n'"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "bol--;"
    },
    {
      "color": "#000000",
      "content": "cur--;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(comment_needed&&(is_empty_line(bol,eol)||"
    },
    {
      "color": "#000000",
      "content": "match_funcname(opt,gs,bol,eol))){"
    },
    {
      "color": "#000000",
      "content": "comment_needed=0;"
    },
    {
      "color": "#000000",
      "content": "from=orig_from;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(cur<from){"
    },
    {
      "color": "#000000",
      "content": "cur++;"
    },
    {
      "color": "#000000",
      "content": "bol=next_bol;"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(funcname_needed&&match_funcname(opt,gs,bol,eol)){"
    },
    {
      "color": "#000000",
      "content": "funcname_lno=cur;"
    },
    {
      "color": "#000000",
      "content": "funcname_needed=0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->funcbody)"
    },
    {
      "color": "#000000",
      "content": "comment_needed=1;"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#000000",
      "content": "from=orig_from;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#008000",
      "content": "/*Weneedtolookevenfurtherbacktofindafunctionsignature.*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->funcname&&funcname_needed)"
    },
    {
      "color": "#000000",
      "content": "show_funcname_line(opt,gs,bol,cur);"
    },
    {
      "color": "#008000",
      "content": "/*Backforward.*/"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(cur<lno){"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*eol=bol,sign=(cur==funcname_lno)?"
    },
    {
      "color": "#a31515",
      "content": "'='"
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#a31515",
      "content": "'-'"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(*eol!="
    },
    {
      "color": "#a31515",
      "content": "'\\n'"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "eol++;"
    },
    {
      "color": "#000000",
      "content": "show_line(opt,bol,eol,gs->name,cur,0,sign);"
    },
    {
      "color": "#000000",
      "content": "bol=eol+1;"
    },
    {
      "color": "#000000",
      "content": "cur++;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "should_lookahead("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->extended)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#008000",
      "content": "/*puntfortoocomplexstuff*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->invert)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(p=opt->pattern_list;p;p=p->next){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(p->token!=GREP_PATTERN)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#008000",
      "content": "/*puntfor\"headeronly\"andstuff*/"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "look_ahead("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#0000ff",
      "content": "long"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "left_p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "lno_p"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "**"
    },
    {
      "color": "#808080",
      "content": "bol_p"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#000000",
      "content": "lno=*lno_p;"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*bol=*bol_p;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_pat*p;"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*sp,*last_bol;"
    },
    {
      "color": "#000000",
      "content": "regoff_tearliest=-1;"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(p=opt->pattern_list;p;p=p->next){"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "hit;"
    },
    {
      "color": "#000000",
      "content": "regmatch_tm;"
    },
    {
      "color": "#000000",
      "content": "hit=patmatch(p,bol,bol+*left_p,&m,0);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!hit||m.rm_so<0||m.rm_eo<0)"
    },
    {
      "color": "#0000ff",
      "content": "continue"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(earliest<0||m.rm_so<earliest)"
    },
    {
      "color": "#000000",
      "content": "earliest=m.rm_so;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(earliest<0){"
    },
    {
      "color": "#000000",
      "content": "*bol_p=bol+*left_p;"
    },
    {
      "color": "#000000",
      "content": "*left_p=0;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(sp=bol+earliest;bol<sp&&sp[-1]!="
    },
    {
      "color": "#a31515",
      "content": "'\\n'"
    },
    {
      "color": "#000000",
      "content": ";sp--)"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#008000",
      "content": "/*findthebeginningoftheline*/"
    },
    {
      "color": "#000000",
      "content": "last_bol=sp;"
    },
    {
      "color": "#0000ff",
      "content": "for"
    },
    {
      "color": "#000000",
      "content": "(sp=bol;sp<last_bol;sp++){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(*sp=="
    },
    {
      "color": "#a31515",
      "content": "'\\n'"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "lno++;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "*left_p-=last_bol-bol;"
    },
    {
      "color": "#000000",
      "content": "*bol_p=last_bol;"
    },
    {
      "color": "#000000",
      "content": "*lno_p=lno;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "fill_textconv_grep("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "repository*"
    },
    {
      "color": "#808080",
      "content": "r"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "userdiff_driver*"
    },
    {
      "color": "#808080",
      "content": "driver"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "diff_filespec*df;"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*buf;"
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#000000",
      "content": "size;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!driver||!driver->textconv)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "grep_source_load(gs);"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Thetextconvinterfaceisintimatelytiedtodiff_filespecs,sowe"
    },
    {
      "color": "#008000",
      "content": "*havetopretendtobeone.Ifwecouldunifythegrep_source"
    },
    {
      "color": "#008000",
      "content": "*anddiff_filespecstructs,thismesscouldjustgoaway."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "df=alloc_filespec(gs->path);"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(gs->type){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_SOURCE_OID:"
    },
    {
      "color": "#000000",
      "content": "fill_filespec(df,gs->"
    },
    {
      "color": "#808080",
      "content": "identifier"
    },
    {
      "color": "#000000",
      "content": ",1,"
    },
    {
      "color": "#09885a",
      "content": "0"
    },
    {
      "color": "#000000",
      "content": "100644);"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_SOURCE_FILE:"
    },
    {
      "color": "#000000",
      "content": "fill_filespec(df,null_oid(),0,"
    },
    {
      "color": "#09885a",
      "content": "0"
    },
    {
      "color": "#000000",
      "content": "100644);"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "default"
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#000000",
      "content": "BUG("
    },
    {
      "color": "#a31515",
      "content": "\"attempttotextconvsomethingwithoutapath?\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*fill_textconvisnotremotelythread-safe;itmodifiestheglobal"
    },
    {
      "color": "#008000",
      "content": "*difftempfilestructure,writestothe_repo'sodbandmight"
    },
    {
      "color": "#008000",
      "content": "*internallycallthread-unsafefunctionssuchasthe"
    },
    {
      "color": "#008000",
      "content": "*prepare_packed_git()lazy-initializator.Becauseofthelasttwo,we"
    },
    {
      "color": "#008000",
      "content": "*mustensuremutualexclusionbetweenthiscallandtheobjectreading"
    },
    {
      "color": "#008000",
      "content": "*API,thusweuseobj_read_lock()here."
    },
    {
      "color": "#008000",
      "content": "*"
    },
    {
      "color": "#008000",
      "content": "*TODO:allowingtextconversiontoruninparallelwithobject"
    },
    {
      "color": "#008000",
      "content": "*readingoperationsmightincreaseperformanceinthemultithreaded"
    },
    {
      "color": "#008000",
      "content": "*non-worktreeegit-grepwith--textconv."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "obj_read_lock();"
    },
    {
      "color": "#000000",
      "content": "size=fill_textconv(r,driver,df,&buf);"
    },
    {
      "color": "#000000",
      "content": "obj_read_unlock();"
    },
    {
      "color": "#000000",
      "content": "free_filespec(df);"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Thenormalfill_textconvusagebythediffmachinerywouldjustkeep"
    },
    {
      "color": "#008000",
      "content": "*thetextconv'dbufseparatefromthediff_filespec.Butmuchofthe"
    },
    {
      "color": "#008000",
      "content": "*grepcodepassesaroundagrep_sourceandassumesthatits\"buf\""
    },
    {
      "color": "#008000",
      "content": "*pointeristhebeginningofthethingwearesearching.Solet's"
    },
    {
      "color": "#008000",
      "content": "*installourtextconv'dversionintothegrep_source,takingcarenot"
    },
    {
      "color": "#008000",
      "content": "*toleakanyexistingbuffer."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "grep_source_clear_data(gs);"
    },
    {
      "color": "#000000",
      "content": "gs->buf=buf;"
    },
    {
      "color": "#000000",
      "content": "gs->size=size;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "is_empty_line("
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "bol"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "eol"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(bol<eol&&isspace(*bol))"
    },
    {
      "color": "#000000",
      "content": "bol++;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "bol==eol;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "grep_source_1("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#808080",
      "content": "collect_hits"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*bol;"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*peek_bol="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#0000ff",
      "content": "long"
    },
    {
      "color": "#000000",
      "content": "left;"
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#000000",
      "content": "lno=1;"
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#000000",
      "content": "last_hit=0;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "binary_match_only=0;"
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#000000",
      "content": "count=0;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "try_lookahead=0;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "show_function=0;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "userdiff_driver*textconv="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "grep_contextctx=GREP_CONTEXT_HEAD;"
    },
    {
      "color": "#000000",
      "content": "xdemitconf_txecfg;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->status_only&&gs->name=="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "BUG("
    },
    {
      "color": "#a31515",
      "content": "\"grepcallwhichcouldprintanamerequires\""
    },
    {
      "color": "#a31515",
      "content": "\"grep_source.namebenon-NULL\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->output)"
    },
    {
      "color": "#000000",
      "content": "opt->output=std_output;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->pre_context||opt->post_context||opt->file_break||"
    },
    {
      "color": "#000000",
      "content": "opt->funcbody){"
    },
    {
      "color": "#008000",
      "content": "/*Showhunkmarks,exceptforthefirstfile.*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->last_shown)"
    },
    {
      "color": "#000000",
      "content": "opt->show_hunk_mark=1;"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Ifwe'reusingthreadsthenwecan'teasilyidentify"
    },
    {
      "color": "#008000",
      "content": "*thefirstfile.Alwaysputhunkmarksinthatcase"
    },
    {
      "color": "#008000",
      "content": "*andskiptheveryfirstonelaterinwork_done()."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->output!=std_output)"
    },
    {
      "color": "#000000",
      "content": "opt->show_hunk_mark=1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "opt->last_shown=0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->allow_textconv){"
    },
    {
      "color": "#000000",
      "content": "grep_source_load_driver(gs,opt->repo->index);"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Wemightsetupthesharedtextconvcachedatahere,which"
    },
    {
      "color": "#008000",
      "content": "*isnotthread-safe.Also,get_oid_with_context()and"
    },
    {
      "color": "#008000",
      "content": "*parse_object()mightbeinternallycalled.Astheyarenot"
    },
    {
      "color": "#008000",
      "content": "*currentlythread-safeandmightberacywithobjectreading,"
    },
    {
      "color": "#008000",
      "content": "*obj_read_lock()mustbecalled."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "grep_attr_lock();"
    },
    {
      "color": "#000000",
      "content": "obj_read_lock();"
    },
    {
      "color": "#000000",
      "content": "textconv=userdiff_get_textconv(opt->repo,gs->driver);"
    },
    {
      "color": "#000000",
      "content": "obj_read_unlock();"
    },
    {
      "color": "#000000",
      "content": "grep_attr_unlock();"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Weknowtheresultofatextconvistext,soweonlyhavetocare"
    },
    {
      "color": "#008000",
      "content": "*aboutbinaryhandlingifwearenotusingit."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!textconv){"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(opt->binary){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_BINARY_DEFAULT:"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(grep_source_is_binary(gs,opt->repo->"
    },
    {
      "color": "#808080",
      "content": "index"
    },
    {
      "color": "#000000",
      "content": "))"
    },
    {
      "color": "#000000",
      "content": "binary_match_only=1;"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_BINARY_NOMATCH:"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(grep_source_is_binary(gs,opt->repo->"
    },
    {
      "color": "#808080",
      "content": "index"
    },
    {
      "color": "#000000",
      "content": "))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#008000",
      "content": "/*Assumeunmatch*/"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_BINARY_TEXT:"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "default"
    },
    {
      "color": "#000000",
      "content": ":"
    },
    {
      "color": "#000000",
      "content": "BUG("
    },
    {
      "color": "#a31515",
      "content": "\"unknownbinaryhandlingmode\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "memset(&xecfg,0,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(xecfg));"
    },
    {
      "color": "#000000",
      "content": "opt->priv=&xecfg;"
    },
    {
      "color": "#000000",
      "content": "try_lookahead=should_lookahead(opt);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(fill_textconv_grep(opt->repo,textconv,gs)<0)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "bol=gs->buf;"
    },
    {
      "color": "#000000",
      "content": "left=gs->size;"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(left){"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*eol;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "hit;"
    },
    {
      "color": "#0000ff",
      "content": "ssize_t"
    },
    {
      "color": "#000000",
      "content": "cno;"
    },
    {
      "color": "#0000ff",
      "content": "ssize_t"
    },
    {
      "color": "#000000",
      "content": "col=-1,icol=-1;"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*look_ahead()skipsquicklytothelinethatpossibly"
    },
    {
      "color": "#008000",
      "content": "*hasthenexthit;don'tcallitifweneedtodo"
    },
    {
      "color": "#008000",
      "content": "*somethingmorethanjustskippingthecurrentline"
    },
    {
      "color": "#008000",
      "content": "*inresponsetoanunmatchforthecurrentline.E.g."
    },
    {
      "color": "#008000",
      "content": "*insideapost-contextwindow,wewillshowthecurrent"
    },
    {
      "color": "#008000",
      "content": "*lineasacontextaroundtheprevioushitwhenit"
    },
    {
      "color": "#008000",
      "content": "*doesn'thit."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(try_lookahead"
    },
    {
      "color": "#000000",
      "content": "&&!(last_hit"
    },
    {
      "color": "#000000",
      "content": "&&(show_function||"
    },
    {
      "color": "#000000",
      "content": "lno<=last_hit+opt->post_context))"
    },
    {
      "color": "#000000",
      "content": "&&look_ahead(opt,&left,&lno,&bol))"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "eol=end_of_line(bol,&left);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "((ctx==GREP_CONTEXT_HEAD)&&(eol==bol))"
    },
    {
      "color": "#000000",
      "content": "ctx=GREP_CONTEXT_BODY;"
    },
    {
      "color": "#000000",
      "content": "hit=match_line(opt,bol,eol,&col,&icol,ctx,collect_hits);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(collect_hits)"
    },
    {
      "color": "#0000ff",
      "content": "goto"
    },
    {
      "color": "#000000",
      "content": "next_line;"
    },
    {
      "color": "#008000",
      "content": "/*\"grep-v-efoo-ebla\"shouldlistlines"
    },
    {
      "color": "#008000",
      "content": "*thatdonothaveeither,soinversionshould"
    },
    {
      "color": "#008000",
      "content": "*bedoneoutside."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->invert)"
    },
    {
      "color": "#000000",
      "content": "hit=!hit;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->unmatch_name_only){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(hit)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#0000ff",
      "content": "goto"
    },
    {
      "color": "#000000",
      "content": "next_line;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(hit){"
    },
    {
      "color": "#000000",
      "content": "count++;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->status_only)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->name_only){"
    },
    {
      "color": "#000000",
      "content": "show_name(opt,gs->name);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->count)"
    },
    {
      "color": "#0000ff",
      "content": "goto"
    },
    {
      "color": "#000000",
      "content": "next_line;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(binary_match_only){"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,"
    },
    {
      "color": "#a31515",
      "content": "\"Binaryfile\""
    },
    {
      "color": "#000000",
      "content": ",12);"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,gs->name,strlen(gs->name),"
    },
    {
      "color": "#000000",
      "content": "opt->colors[GREP_COLOR_FILENAME]);"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,"
    },
    {
      "color": "#a31515",
      "content": "\"matches\\n\""
    },
    {
      "color": "#000000",
      "content": ",9);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#008000",
      "content": "/*Hitatthisline.Ifwehaven'tshownthe"
    },
    {
      "color": "#008000",
      "content": "*pre-contextlines,wewouldneedtoshowthem."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->pre_context||opt->funcbody)"
    },
    {
      "color": "#000000",
      "content": "show_pre_context(opt,gs,bol,eol,lno);"
    },
    {
      "color": "#0000ff",
      "content": "else"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->funcname)"
    },
    {
      "color": "#000000",
      "content": "show_funcname_line(opt,gs,bol,lno);"
    },
    {
      "color": "#000000",
      "content": "cno=opt->invert?icol:col;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(cno<0){"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Anegativecnoindicatesthattherewasno"
    },
    {
      "color": "#008000",
      "content": "*matchontheline.Wearethusinvertedand"
    },
    {
      "color": "#008000",
      "content": "*beingaskedtoshowalllinesthat_don't_"
    },
    {
      "color": "#008000",
      "content": "*matchagivenexpression.Therefore,setcno"
    },
    {
      "color": "#008000",
      "content": "*to0tosuggestthewholelinematches."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "cno=0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "show_line(opt,bol,eol,gs->name,lno,cno+1,"
    },
    {
      "color": "#a31515",
      "content": "':'"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "last_hit=lno;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->funcbody)"
    },
    {
      "color": "#000000",
      "content": "show_function=1;"
    },
    {
      "color": "#0000ff",
      "content": "goto"
    },
    {
      "color": "#000000",
      "content": "next_line;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(show_function&&(!peek_bol||peek_bol<bol)){"
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#0000ff",
      "content": "long"
    },
    {
      "color": "#000000",
      "content": "peek_left=left;"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*peek_eol=eol;"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*Trailingemptylinesarenotinteresting."
    },
    {
      "color": "#008000",
      "content": "*Peekpastthemtoseeiftheybelongtothe"
    },
    {
      "color": "#008000",
      "content": "*bodyofthecurrentfunction."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "peek_bol=bol;"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(is_empty_line(peek_bol,peek_eol)){"
    },
    {
      "color": "#000000",
      "content": "peek_bol=peek_eol+1;"
    },
    {
      "color": "#000000",
      "content": "peek_eol=end_of_line(peek_bol,&peek_left);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(match_funcname(opt,gs,peek_bol,peek_eol))"
    },
    {
      "color": "#000000",
      "content": "show_function=0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(show_function||"
    },
    {
      "color": "#000000",
      "content": "(last_hit&&lno<=last_hit+opt->post_context)){"
    },
    {
      "color": "#008000",
      "content": "/*Ifthelasthitiswithinthepostcontext,"
    },
    {
      "color": "#008000",
      "content": "*weneedtoshowthisline."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "show_line(opt,bol,eol,gs->name,lno,col+1,"
    },
    {
      "color": "#a31515",
      "content": "'-'"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "next_line:"
    },
    {
      "color": "#000000",
      "content": "bol=eol+1;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!left)"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "left--;"
    },
    {
      "color": "#000000",
      "content": "lno++;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(collect_hits)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->status_only)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "opt->unmatch_name_only;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->unmatch_name_only){"
    },
    {
      "color": "#008000",
      "content": "/*Wedidnotseeanyhit,sowewanttoshowthis*/"
    },
    {
      "color": "#000000",
      "content": "show_name(opt,gs->name);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "xdiff_clear_find_func(&xecfg);"
    },
    {
      "color": "#000000",
      "content": "opt->priv="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#008000",
      "content": "/*NEEDSWORK:"
    },
    {
      "color": "#008000",
      "content": "*Thereal\"grep-cfoo*.c\"givesmany\"bar.c:0\"lines,"
    },
    {
      "color": "#008000",
      "content": "*whichfeelsmostlyuselessbutsometimesuseful.Maybe"
    },
    {
      "color": "#008000",
      "content": "*makeitanotheroption?Fornowsuppressthem."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->count&&count){"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "buf[32];"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->pathname){"
    },
    {
      "color": "#000000",
      "content": "output_color(opt,gs->name,strlen(gs->name),"
    },
    {
      "color": "#000000",
      "content": "opt->colors[GREP_COLOR_FILENAME]);"
    },
    {
      "color": "#000000",
      "content": "output_sep(opt,"
    },
    {
      "color": "#a31515",
      "content": "':'"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "xsnprintf(buf,"
    },
    {
      "color": "#0000ff",
      "content": "sizeof"
    },
    {
      "color": "#000000",
      "content": "(buf),"
    },
    {
      "color": "#a31515",
      "content": "\"%u\\n\""
    },
    {
      "color": "#000000",
      "content": ",count);"
    },
    {
      "color": "#000000",
      "content": "opt->output(opt,buf,strlen(buf));"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "!!last_hit;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "clr_hit_marker("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "x"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#008000",
      "content": "/*All-hitmarkersaremeaningfulonlyattheverytoplevel"
    },
    {
      "color": "#008000",
      "content": "*ORnode."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(1){"
    },
    {
      "color": "#000000",
      "content": "x->hit=0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(x->node!=GREP_NODE_OR)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "x->u.binary.left->hit=0;"
    },
    {
      "color": "#000000",
      "content": "x=x->u.binary.right;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "chk_hit_marker("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_expr*"
    },
    {
      "color": "#808080",
      "content": "x"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#008000",
      "content": "/*Toplevelnodeshavehitmarkers.Seeiftheyallarehits*/"
    },
    {
      "color": "#0000ff",
      "content": "while"
    },
    {
      "color": "#000000",
      "content": "(1){"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(x->node!=GREP_NODE_OR)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "x->hit;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!x->u.binary.left->hit)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "x=x->u.binary.right;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "grep_source("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#008000",
      "content": "/*"
    },
    {
      "color": "#008000",
      "content": "*wedonothavetodothetwo-passgrepwhenwedonotcheck"
    },
    {
      "color": "#008000",
      "content": "*buffer-wide\"all-match\"."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!opt->all_match&&!opt->no_body_match)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "grep_source_1(opt,gs,0);"
    },
    {
      "color": "#008000",
      "content": "/*Otherwisethetoplevel\"or\"termshitabitdifferently."
    },
    {
      "color": "#008000",
      "content": "*Wefirstclearhitmarkersfromthem."
    },
    {
      "color": "#008000",
      "content": "*/"
    },
    {
      "color": "#000000",
      "content": "clr_hit_marker(opt->pattern_expression);"
    },
    {
      "color": "#000000",
      "content": "opt->body_hit=0;"
    },
    {
      "color": "#000000",
      "content": "grep_source_1(opt,gs,1);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->all_match&&!chk_hit_marker(opt->pattern_expression))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(opt->no_body_match&&opt->body_hit)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "grep_source_1(opt,gs,0);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "grep_source_init_buf("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "buf"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#0000ff",
      "content": "long"
    },
    {
      "color": "#808080",
      "content": "size"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "gs->type=GREP_SOURCE_BUF;"
    },
    {
      "color": "#000000",
      "content": "gs->name="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "gs->path="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "gs->buf=buf;"
    },
    {
      "color": "#000000",
      "content": "gs->size=size;"
    },
    {
      "color": "#000000",
      "content": "gs->driver="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "gs->identifier="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "grep_buffer("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_opt*"
    },
    {
      "color": "#808080",
      "content": "opt"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "buf"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "unsigned"
    },
    {
      "color": "#0000ff",
      "content": "long"
    },
    {
      "color": "#808080",
      "content": "size"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_sourcegs;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "r;"
    },
    {
      "color": "#000000",
      "content": "grep_source_init_buf(&gs,buf,size);"
    },
    {
      "color": "#000000",
      "content": "r=grep_source(opt,&gs);"
    },
    {
      "color": "#000000",
      "content": "grep_source_clear(&gs);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "r;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "grep_source_init_file("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "name"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "path"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "gs->type=GREP_SOURCE_FILE;"
    },
    {
      "color": "#000000",
      "content": "gs->name=xstrdup_or_null(name);"
    },
    {
      "color": "#000000",
      "content": "gs->path=xstrdup_or_null(path);"
    },
    {
      "color": "#000000",
      "content": "gs->buf="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "gs->size=0;"
    },
    {
      "color": "#000000",
      "content": "gs->driver="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "gs->identifier=xstrdup(path);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "grep_source_init_oid("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "name"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*"
    },
    {
      "color": "#808080",
      "content": "path"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "object_id*"
    },
    {
      "color": "#808080",
      "content": "oid"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "repository*"
    },
    {
      "color": "#808080",
      "content": "repo"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "gs->type=GREP_SOURCE_OID;"
    },
    {
      "color": "#000000",
      "content": "gs->name=xstrdup_or_null(name);"
    },
    {
      "color": "#000000",
      "content": "gs->path=xstrdup_or_null(path);"
    },
    {
      "color": "#000000",
      "content": "gs->buf="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "gs->size=0;"
    },
    {
      "color": "#000000",
      "content": "gs->driver="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "gs->identifier=oiddup(oid);"
    },
    {
      "color": "#000000",
      "content": "gs->repo=repo;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "grep_source_clear("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "FREE_AND_NULL(gs->name);"
    },
    {
      "color": "#000000",
      "content": "FREE_AND_NULL(gs->path);"
    },
    {
      "color": "#000000",
      "content": "FREE_AND_NULL(gs->identifier);"
    },
    {
      "color": "#000000",
      "content": "grep_source_clear_data(gs);"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "grep_source_clear_data("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(gs->type){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_SOURCE_FILE:"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_SOURCE_OID:"
    },
    {
      "color": "#008000",
      "content": "/*thesetypesownthebuffer*/"
    },
    {
      "color": "#000000",
      "content": "free(("
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*)gs->"
    },
    {
      "color": "#808080",
      "content": "buf"
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "gs->buf="
    },
    {
      "color": "#0000ff",
      "content": "NULL"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "gs->size=0;"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_SOURCE_BUF:"
    },
    {
      "color": "#008000",
      "content": "/*leaveuser-providedbufintact*/"
    },
    {
      "color": "#0000ff",
      "content": "break"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "grep_source_load_oid("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "enum"
    },
    {
      "color": "#000000",
      "content": "object_typetype;"
    },
    {
      "color": "#000000",
      "content": "gs->buf=repo_read_object_file(gs->repo,gs->identifier,&type,"
    },
    {
      "color": "#000000",
      "content": "&gs->size);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!gs->buf)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "error(_("
    },
    {
      "color": "#a31515",
      "content": "\"'%s':unabletoread%s\""
    },
    {
      "color": "#000000",
      "content": "),"
    },
    {
      "color": "#000000",
      "content": "gs->name,"
    },
    {
      "color": "#000000",
      "content": "oid_to_hex(gs->identifier));"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "grep_source_load_file("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "const"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*filename=gs->identifier;"
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "statst;"
    },
    {
      "color": "#0000ff",
      "content": "char"
    },
    {
      "color": "#000000",
      "content": "*data;"
    },
    {
      "color": "#0000ff",
      "content": "size_t"
    },
    {
      "color": "#000000",
      "content": "size;"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "i;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(lstat(filename,&st)<0){"
    },
    {
      "color": "#000000",
      "content": "err_ret:"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(errno!=ENOENT)"
    },
    {
      "color": "#000000",
      "content": "error_errno(_("
    },
    {
      "color": "#a31515",
      "content": "\"failedtostat'%s'\""
    },
    {
      "color": "#000000",
      "content": "),filename);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "-1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!S_ISREG(st.st_mode))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "-1;"
    },
    {
      "color": "#000000",
      "content": "size=xsize_t(st.st_size);"
    },
    {
      "color": "#000000",
      "content": "i=open(filename,O_RDONLY);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(i<0)"
    },
    {
      "color": "#0000ff",
      "content": "goto"
    },
    {
      "color": "#000000",
      "content": "err_ret;"
    },
    {
      "color": "#000000",
      "content": "data=xmallocz(size);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(st.st_size!=read_in_full(i,data,size)){"
    },
    {
      "color": "#000000",
      "content": "error_errno(_("
    },
    {
      "color": "#a31515",
      "content": "\"'%s':shortread\""
    },
    {
      "color": "#000000",
      "content": "),filename);"
    },
    {
      "color": "#000000",
      "content": "close(i);"
    },
    {
      "color": "#000000",
      "content": "free(data);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "-1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "close(i);"
    },
    {
      "color": "#000000",
      "content": "gs->buf=data;"
    },
    {
      "color": "#000000",
      "content": "gs->size=size;"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "grep_source_load("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(gs->buf)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#0000ff",
      "content": "switch"
    },
    {
      "color": "#000000",
      "content": "(gs->type){"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_SOURCE_FILE:"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "grep_source_load_file(gs);"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_SOURCE_OID:"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "grep_source_load_oid(gs);"
    },
    {
      "color": "#0000ff",
      "content": "case"
    },
    {
      "color": "#000000",
      "content": "GREP_SOURCE_BUF:"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "gs->buf?0:-1;"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#000000",
      "content": "BUG("
    },
    {
      "color": "#a31515",
      "content": "\"invalidgrep_sourcetypetoload\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "void"
    },
    {
      "color": "#000000",
      "content": "grep_source_load_driver("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "index_state*"
    },
    {
      "color": "#808080",
      "content": "istate"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(gs->driver)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": ";"
    },
    {
      "color": "#000000",
      "content": "grep_attr_lock();"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(gs->path)"
    },
    {
      "color": "#000000",
      "content": "gs->driver=userdiff_find_by_path(istate,gs->path);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!gs->driver)"
    },
    {
      "color": "#000000",
      "content": "gs->driver=userdiff_find_by_name("
    },
    {
      "color": "#a31515",
      "content": "\"default\""
    },
    {
      "color": "#000000",
      "content": ");"
    },
    {
      "color": "#000000",
      "content": "grep_attr_unlock();"
    },
    {
      "color": "#000000",
      "content": "}"
    },
    {
      "color": "#0000ff",
      "content": "static"
    },
    {
      "color": "#0000ff",
      "content": "int"
    },
    {
      "color": "#000000",
      "content": "grep_source_is_binary("
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "grep_source*"
    },
    {
      "color": "#808080",
      "content": "gs"
    },
    {
      "color": "#000000",
      "content": ","
    },
    {
      "color": "#0000ff",
      "content": "struct"
    },
    {
      "color": "#000000",
      "content": "index_state*"
    },
    {
      "color": "#808080",
      "content": "istate"
    },
    {
      "color": "#000000",
      "content": ")"
    },
    {
      "color": "#000000",
      "content": "{"
    },
    {
      "color": "#000000",
      "content": "grep_source_load_driver(gs,istate);"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(gs->driver->binary!=-1)"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "gs->driver->binary;"
    },
    {
      "color": "#0000ff",
      "content": "if"
    },
    {
      "color": "#000000",
      "content": "(!grep_source_load(gs))"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "buffer_is_binary(gs->buf,gs->size);"
    },
    {
      "color": "#0000ff",
      "content": "return"
    },
    {
      "color": "#000000",
      "content": "0;"
    },
    {
      "color": "#000000",
      "content": "}"
    }
  ]
}
